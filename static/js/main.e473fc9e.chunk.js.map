{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","flipCellsAroundMe","isLit","classes","className","onClick","Board","nrows","ncols","chanceLightStartsOn","useState","initialBoard","y","innerArray","x","push","Math","random","createBoard","board","setBoard","winner","setWinner","flipCellsAround","coord","oldBoard","split","map","Number","test","boardCopy","length","flipCell","tableBoard","row","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAqBeA,MALf,YAA6C,IAA7BC,EAA4B,EAA5BA,kBAAmBC,EAAS,EAATA,MAC3BC,EAAO,eAAWD,EAAQ,WAAa,IAC7C,OAAO,oBAAIE,UAAWD,EAASE,QAASJ,K,MCkH3BK,MAvGf,YAAuD,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,oBAI7B,EAA0BC,mBAK1B,WAEE,IADA,IAAIC,EAAe,GACVC,EAAI,EAAGA,EAAIL,EAAOK,IAAK,CAE9B,IADA,IAAIC,EAAa,GACRC,EAAI,EAAGA,EAAIN,EAAOM,IACzBD,EAAWE,KAAKC,KAAKC,SAAWR,GAGlCE,EAAaI,KAAKF,GAEpB,OAAOF,EAf0BO,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,EAA4BV,oBAAS,GAArC,mBAAOW,EAAP,KAAeC,EAAf,KAEA,SAASC,EAAgBC,GACvBJ,GAAS,SAACK,GACR,MAAeD,EAAME,MAAM,KAAKC,IAAIC,QAApC,mBAAOhB,EAAP,KAAUE,EAAV,KAEIe,EAAO,GACXP,GAAU,WACR,IAAK,IAAIV,EAAI,EAAGA,EAAIL,EAAOK,IACzB,IAAK,IAAIE,EAAI,EAAGA,EAAIN,EAAOM,KACD,IAApBgB,EAAUlB,GAAGE,IACfe,EAAKd,KAAK,GAIhB,GAAIc,EAAKE,OAAS,EAChB,OAAO,KAIX,IAAMC,EAAW,SAACpB,EAAGE,EAAGgB,GAElBhB,GAAK,GAAKA,EAAIN,GAASI,GAAK,GAAKA,EAAIL,IACvCuB,EAAUlB,GAAGE,IAAMgB,EAAUlB,GAAGE,KAK9BgB,EAAYL,EAASE,KAAI,SAACd,GAAD,mBAAoBA,MAcnD,OANAmB,EAASpB,EAAGE,EAAGgB,GACfE,EAASpB,EAAGE,EAAI,EAAGgB,GACnBE,EAASpB,EAAGE,EAAI,EAAGgB,GACnBE,EAASpB,EAAI,EAAGE,EAAGgB,GACnBE,EAASpB,EAAI,EAAGE,EAAGgB,GAEZA,KASX,IADA,IAAIG,EAAa,GACRrB,EAAI,EAAGA,EAAIL,EAAOK,IAAK,CAE9B,IADA,IAAIsB,EAAM,GADoB,WAErBpB,GACP,IAAIU,EAAK,UAAMZ,EAAN,YAAWE,GACpBoB,EAAInB,KACF,cAAC,EAAD,CAEEb,MAAOiB,EAAMP,GAAGE,GAChBb,kBAAmB,kBAAMsB,EAAgBC,KAFpCA,KAJFV,EAAI,EAAGA,EAAIN,EAAOM,IAAM,EAAxBA,GAUTmB,EAAWlB,KAAK,6BAAamB,GAAJtB,IAG3B,OAAIS,EAEA,qBAAKjB,UAAU,SAAf,SACE,0CAKJ,uBAAOA,UAAU,QAAjB,SACE,gCAAQ6B,O,MC/FCE,MA1Bf,WACE,OACE,sBAAK/B,UAAU,MAAf,UACE,uDACA,sBAAKA,UAAU,eAAf,UACE,sDACA,6JAKA,8CACA,gFAEA,4CACA,yKAKF,cAAC,EAAD,CAAOG,MAAO,EAAGC,MAAO,EAAGC,oBAAqB,SCdlC2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e473fc9e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Cell.css\";\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nfunction Cell({ flipCellsAroundMe, isLit }) {\n  const classes = `Cell ${isLit ? \"Cell-lit\" : \"\"}`;\n  return <td className={classes} onClick={flipCellsAroundMe} />;\n}\n\nexport default Cell;\n","import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  // nrows: number of arrays\n  // ncols: number of items in array\n  // trueFalse: 0 = false/off, 1 = true/on\n  const [board, setBoard] = useState(createBoard());\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit (create array-of-arrays of true/false values) */\n  // nrows: number of arrays\n  // ncols: number of items in array\n  // Creates an array with \"nrows\" arrays with \"ncols\" cells in each array identifying if the light is on or off.\n  function createBoard() {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let innerArray = [];\n      for (let x = 0; x < ncols; x++) {\n        innerArray.push(Math.random() > chanceLightStartsOn);\n        // Math.random() > chanceLightStartsOn --> False if random number is less than the preset start on percentage.  True value = lit cell, connected in tableBoard creation, False = off cell\n      }\n      initialBoard.push(innerArray);\n    }\n    return initialBoard;\n    // Output used to create initial board on page load\n  }\n\n  const [winner, setWinner] = useState(false);\n\n  function flipCellsAround(coord) {\n    setBoard((oldBoard) => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      let test = [];\n      setWinner(() => {\n        for (let y = 0; y < nrows; y++) {\n          for (let x = 0; x < ncols; x++) {\n            if (boardCopy[y][x] === true) {\n              test.push(1);\n            }\n          }\n        }\n        if (test.length < 2) {\n          return true;\n        }\n      });\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // Make a (deep) copy of the oldBoard\n      const boardCopy = oldBoard.map((innerArray) => [...innerArray]);\n      // Initial oldBoard = board created at beginning of game  [11, 12, 13]\n      // [21, 22, 23]\n      // [31, 32, 33]\n      // [...rows] = [r1c1, r1c2, r1,c3]\n      // Function creates copy of initial array\n\n      // flip this cell and the cells around it\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      return boardCopy;\n      // return value becomes value in setBoard, and updates the lights\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // make table board\n  let tableBoard = [];\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push(\n        <Cell\n          key={coord}\n          isLit={board[y][x]}\n          flipCellsAroundMe={() => flipCellsAround(coord)}\n        />\n      );\n    }\n    tableBoard.push(<tr key={y}>{row}</tr>);\n  }\n\n  if (winner) {\n    return (\n      <div className=\"winner\">\n        <h2>Winner</h2>\n      </div>\n    );\n  }\n  return (\n    <table className=\"Board\">\n      <tbody>{tableBoard}</tbody>\n    </table>\n  );\n}\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Welcome to Lights Out</h1>\n      <div className=\"instructions\">\n        <h3>Object of the Game: </h3>\n        <p>\n          Turn off all the lights. When the game is won, the board should be all\n          black, and a “You Won” message will appear.\n        </p>\n\n        <h3>How to play:</h3>\n        <p>Click on a cell to toggle that light on or off.</p>\n\n        <h3>The catch:</h3>\n        <p>\n          Each time a light is turned on or off, the light above it, to the left\n          of it, to the right of it, and below it will also change state\n        </p>\n      </div>\n      <Board nrows={3} ncols={3} chanceLightStartsOn={0.5} />\n      {/* Boards will win with 3, 5, 7, 9 */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}